version: '2.0'
thresholds:
  velocity:
    bronze: 200
    silver: 500
    gold: 1000
  security:
    bronze: 200
    silver: 500
    gold: 1000
  quality:
    bronze: 200
    silver: 500
    gold: 1000
  resilience:
    bronze: 200
    silver: 500
    gold: 1000
questions:
- id: 3BXbHzkdUl0=
  summary: App runs end-to-end locally
  points:
    velocity: 200
  description: '"End-to-end" here means the frontend, backend, and database can be
    easily spun up so anyone can test the app locally. This can be achieved quite
    easily using docker-compose.

    The aim here is to decrease the amount of time it takes to test new code. Pushing
    code to a dev environment in order to test it is slow and can disrupt other developers.'
- id: gezth1fxJNs=
  summary: CI/CD pipeline created
  points:
    velocity: 100
- id: j7Kyrxbwv5c=
  summary: Test environment exists
  points:
    velocity: 100
    security: 25
  description: QAs should be able to test features in isolation from the development
    environment.
- id: sKAnYrTiQos=
  summary: Staging environment exists
  points:
    velocity: 50
    security: 25
  description: POs/BAs should be able to test features in isolation from the dev and
    test environments.
- id: hhsde4MvYIc=
  summary: Pushing to any branch or merging a PR requires project membership
  points:
    security: 50
  description: Could any FreshWorks employee push code to your repo? Or any other
    non-project member? If so, please restrict project membership.
- id: HSjmJEugDJ0=
  summary: Production is not accessible from non-production environments
  points:
    security: 50
  description: Easy solution is to keep them in separate VPCs (if on AWS). Alternatively,
    entirely separate accounts for dev/test/staging vs. production is a good solution.
    If on OpenShift, please be careful with cross-namespace access in network config.
- id: 7L9tAjQGIJI=
  summary: Any code deployed to production must have been approved by at least one
    other person other than the author of the code
  points:
    security: 25
  description: Just requiring a single approval on all PRs fulfils this requirement.
    We don't want people yolo-merging into prod.
- id: gpxjJPUPzvw=
  summary: Production deployments can only be performed by an admin user
  points:
    security: 50
  description: A good approach to this is to only allow deployments from your CI server
    (e.g. GitHub Actions), and make sure that an admin approval is required for any
    PR that would start a deployment to prod. I would recommend having all developers
    being 'admin's for any early stage projects.
- id: ZU1ohqy+1jI=
  summary: Access to all infrastructure requires 2FA
  points:
    security: 100
  description: If you are using a client mandated platform which does not support
    2FA then this is N/A. However, if not, please get some 2FA going!
- id: iYVzwdXOicA=
  summary: Access to all infrastructure requires specific user credentials (rather
    than a shared key)
  points:
    security: 100
  description: There should be no shared accounts or keys for accessing infrastructure.
- id: 0siUUNrSd7s=
  summary: Production data storage is only accessible to a production administrator
  points:
    security: 25
  description: Production "state" here refers to databases, sessions state (e.g. Redis),
    or message brokers.
- id: Fa16XWfSGw4=
  summary: Production architecture is only accessible to a production administrator
  points:
    security: 25
  description: Accessing production architecture is, e.g. logging into the AWS or
    OpenShift console with write permissions.
- id: xOhKBPs6P3k=
  summary: Production logs are only accessible to production administrators
  points:
    security: 25
- id: poKmbVtuT8M=
  summary: Production backups, including logs, require production administrator permission
    to access
  points:
    security: 25
  description: Production administrators must be agreed upon by the client and may
    include all developers.
- id: AmnqNk0yQQg=
  summary: Accounts are granted infrastructure access automatically through infrastructure-as-code
  points:
    security: 100
  description: This is great for compliance auditing. If your user access is managed
    by an external entity e.g. BC Gov OCIO team managing access to OpenShift then
    this is N/A.
- id: /srtF5hhTMo=
  summary: Internal services, including databases, are only accessible from other
    services within this app
  points:
    security: 200
  description: This can be achieved using a private subnet in AWS and making sure
    only your load-balancer is in the public subnet. In OpenShift, make sure there
    are no routes into any services which should not be accessed by application users.
- id: S7rLk/QzaVU=
  summary: All production infrastructure access is logged, including the user who
    performed the access
  points:
    security: 200
  description: Can be done using CloudTrail in AWS. This information may be logged
    by the infrastructure provider, e.g. OCIO logs this for you if you are on their
    OpenShift cluster.
- id: R1m1DhsIxP4=
  summary: Dependencies all target specific minor release versions
  points:
    velocity: 25
  description: Reproducible builds are important, and library version bumps should
    be done as part of a release process just like other code changes.
- id: XsugJa0LJJA=
  summary: All app dependencies are automatically analysed for vulnerabilities
  points:
    security: 100
  description: Fancy stuff, not something we have the tooling for at the moment though.
- id: nizgyshBUXw=
  summary: All infrastructure components are automatically analysed for vulnerabilities
  points:
    security: 100
- id: kC8t65JpF2Y=
  summary: Credentials, including database passwords and keys, are not stored anywhere
    in source control history, and are instead stored in a suitable secrets vault.
  points:
    security: 200
  description: A good example this is using https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets
    to inject any such passwords and keys as part of continuous deployment. Or, something
    like AWS SSM or OpenShift Secrets.
- id: w/jpNyWlCHs=
  summary: Secrets on mobile apps must not be reasonably accessible, even on jailbroken
    devices.
  points:
    security: 100
  description: API/SDK keys/passwords are stored in a way that they cannot be reasonably
    accessed, even on jailbroken devices (e.g. the keys aren't stored as plain text
    such that running `strings` on the binary will return the key).
- id: Wagm8cZ98xo=
  summary: Every release build must pass a ZAP automated scan
  points:
    security: 50
  description: Easy security win is integrating ZAP into your test pipeline
- id: m043s8WajP8=
  summary: All major production releases have been manually penetration tested by
    someone with appropriate security training. This can be an internal FreshWorks
    team member or a third party.
  points:
    security: 400
  description: Great to do if you need it for your project. Overkill if not requested
    by the client.
- id: 3oBeREt/K48=
  summary: All environments only expose ports 80 and 443 publicly. Only a bastion
    host may expose a single extra port.
  points:
    security: 50
- id: 03Y2roG2NJY=
  summary: All access to unsecured HTTP is redirected to an HTTPS endpoint
  points:
    security: 100
- id: jQxrNKLo1G8=
  summary: If a security certificate is about to expire, an alert will be raised.
  points:
    velocity: 25
    quality: 100
  description: A Google Calendar reminder for an expiring certificate will fulfil
    this goal
- id: h+YYAHPfFWk=
  summary: All security certificates are automatically renewed
  points:
    velocity: 100
  description: AWS ACM is pretty good at this, otherwise a certbot cron job can do
    the job
- id: 7rPf/hw/ilA=
  summary: All data in transit must be encrypted. The minimum standard for this encryption
    is Mozilla's "Intermediate" or above.
  points:
    security: 100
  description: Make sure you have your TLS settings up-to-date!
- id: k38vrXLhO/Y=
  summary: All data at rest must be encrypted. The minimum standard for this encryption
    is Mozilla's "acceptable" or above.
  points:
    security: 100
  description: OCIO OCP4 has this switched on at the cluster level, so a free win
    if you are using this platform. If on AWS make sure you have encryption-at-rest
    switched in for all volumes, especially any databases.
- id: 7SFvdvLRJRI=
  summary: Mobile apps store logs encrypted on-device, which are then sent by the
    user and decrypted by FreshWorks.
  points:
    security: 50
    resilience: 100
- id: JLFq1bZmQMw=
  summary: User visible error messages contain no technical information
  points:
    quality: 200
    security: 50
  description: No technical jargon or stack traces in user-facing errors please.
- id: z7MKmycuLI8=
  summary: Protected data only exists in the production environment
  points:
    security: 200
  description: This includes database servers and logs. Just don't put protected data
    anywhere in the dev and test environment please, it is a compliance nightmare.
- id: m56BlsvCVJU=
  summary: Log messages never contain secrets, personally identifying, or otherwise
    protected data.
  points:
    security: 200
  description: This includes frontend and backend logging.
- id: MbRwCLTLLc0=
  summary: All production deployment history is recorded
  points:
    velocity: 25
    security: 100
- id: ydUb9yCRF4A=
  summary: Deployments require zero downtime
  points:
    velocity: 300
    quality: 300
- id: GG9Exb2UU0Y=
  summary: Production deployments are blue/green, utilizing automated smoke tests
  points:
    quality: 200
- id: nCJKx7WwU4E=
  summary: All infrastructure changes exist in code and can be PR'd
  points:
    velocity: 300
    quality: 200
  description: As an example, creating AWS apps using terraform or cloudformation,
    and making changes in these scripts rather than making changes in the console.
    IaC techniques mean you can have continuous delivery on the architecture itself.
- id: KykDwQpbxpY=
  summary: IaC is the same template for all environments
  points:
    velocity: 50
  description: Make sure you are using the same terraform or OpenShift config for
    all environments, to make sure production matches test/dev
- id: jIhesGaNBGI=
  summary: IaC changes are automatically applied to environments in CI/CD
  points:
    velocity: 200
  description: This requirement is about being able to deploy IaC in the same way
    you would deploy a code change.
- id: 0tavwCN9688=
  summary: All HTTP endpoints conform to standards around safety, idempotency, and
    cacheability
  points:
    velocity: 50
    quality: 50
- id: +Og012ML7c4=
  summary: All cacheable API HTTP endpoints are cached
  points:
    quality: 50
  description: CloudFront is great for this. Speeds up user experience.
- id: wz3KWTeAlYA=
  summary: Static frontend code is cached in-memory, and returns correct Cache-Control
    headers
  points:
    quality: 50
  description: CloudFront my dudes. Alternatively you can serve your frontend code
    from a server that supports in-memory caching, like nginx.
- id: HvN7xZ2pcRA=
  summary: Logging never blocks the application.
  points:
    quality: 25
  description: Make sure to process log shipping on a separate thread, even if you
    are just writing to disk.
- id: ThefPJfEYGY=
  summary: App has been appropriately performance tested
  points:
    quality: 100
  description: Performance testing includes both load-testing and stress-testing,
    and should be commensurate with app requirements. For example, if we expect a
    maximum of 100 concurrent users then this is what should be tested. Please collaborate
    with a QA Analyst on performance testing. An example tool for this is JMeter.
- id: oheJqr+RgLo=
  summary: All elements of the application stack will automatically scale in response
    to load, up to the limits of the underlying infrastructure
  points:
    quality: 100
  description: Easy with serverless, harder with OpenShift, practically impossible
    on bare metal.
- id: 8xlmA5WLuMQ=
  summary: Application availability is regularly logged
  points:
    quality: 50
  description: Health checks in most container-based hosting platforms will give you
    this.
- id: CSCVgkfdWJM=
  summary: A health/availability dashboard is available with clear information on
    historical app health and metrics
  points:
    quality: 50
  description: CloudWatch can get you this. There are also dashboards in the OpenShift
    console that can be used.
- id: kir8UdYg+rk=
  summary: The app remains available despite the loss of any single machine
  points:
    quality: 100
- id: Fnk2tfkBPjk=
  summary: Application state is regularly backed up and the application is able to
    be rolled back to this backed-up state.
  points:
    resilience: 400
  description: The simplest implementation of this is a regular database backup script,
    and a method for restoring this backup. Managed database services, like AWS RDS,
    are highly recommended if available. For OpenShift deployments we recommend https://github.com/BCDevOps/backup-container.
- id: BOgKpVFbDJ4=
  summary: Production backups are made to a suitable resilient data store
  points:
    resilience: 100
  description: Any backup done to a resilient store like S3, which includes RDS backups,
    gets this requirement for free.
- id: wDT+uSx/194=
  summary: Production backups are checked after every release to gain confidence that
    the backup process is still generating backup files with the correct lookback
    windows.
  points:
    resilience: 200
- id: V2U34hIuohg=
  summary: An automated process validates that backup files exist and have the correct
    lookback windows. An alert will be thrown if these backups do not exist.
  points:
    velocity: 50
    resilience: 50
  description: A common approach to this is to have an internal endpoint which lists
    the available backups, and then use an automated monitoring tool like prometheus
    to regularly check that these backups have the correct lookbacks.
- id: 86uk2hDzkyc=
  summary: Roll-backs require no application downtime
  points:
    quality: 200
- id: TYb9tDQMijE=
  summary: Any actions required to rollback an app to a previous version or state
    can be done within 5 minutes
  points:
    quality: 100
    resilience: 50
  description: This is worded as "any actions required" so that App Store releases,
    which can require a wait period to rollback, are still covered by this requirement.
- id: AG20oQ5HoBw=
  summary: Log messages follow FreshWorks Logging Practices.
  points:
    velocity: 50
- id: RiftPAk4FRU=
  summary: Any error a user receives will be logged, whether generated on the backend
    or frontend
  points:
    quality: 100
- id: AnDl4I+yK3M=
  summary: Any mobile front-end crash or critical error must be tracked.
  points:
    quality: 100
    resilience: 50
  description: Tools like App Center or Firebase Crashlyticis will help us understand
    critical errors.
- id: VrufQu8yryA=
  summary: Application logs are centrally available and searchable
  points:
    velocity: 50
- id: 3HIRPVjttKA=
  summary: Logs from every part of the stack are centrally available, including infrastructure
    and database logs
  points:
    velocity: 50
    security: 50
  description: Infrastructure logs include, but are not limited to, database logs,
    instance logs, load-balancer logs, and firewall logs.
- id: eyTRJswnyzA=
  summary: Log collection will never run out of disk space, while still maintaining
    a lookback window of at least a week.
  points:
    velocity: 100
  description: This requirement can be solved using log rotation with automatic cleanup.
    Very easy in AWS using S3 bucket object expiration rules.
- id: QzD8d0Ftui4=
  summary: All security-critical workflows create logs which identify the user.
  points:
    security: 400
- id: xzOITuSgi+8=
  summary: Encrypted logs are stored on-device and are sent by the user and decrypted
    by FreshWorks.
  points:
    security: 100
- id: MbyYZ7vo4jE=
  summary: All user actions within the app create detailed logs
  points:
    velocity: 25
    security: 100
- id: cG9TewNMs9U=
  summary: If the app becomes unavailable or unhealthy, an alert will be raised within
    30 seconds
  points:
    quality: 400
  description: Easy to do with uptimerobot.com. 30s is a 20s timeout, plus 5s to detect,
    plus 5s to alert.
- id: 0D0cQIqd4KE=
  summary: Any critical error in the app will raise an alert.
  points:
    quality: 200
  description: The definition of a "critical error" is up to the team.
- id: RsY/8tf/m+4=
  summary: If logged errors cross a sensible threshold, an alert will be raised
  points:
    quality: 100
  description: Threshold not specified as the aim is to not be too prescriptive and
    instead to encourage a conversation around what is appropriate for the application.
    The infrastructure must be in place so that alerts can be raised. This threshold
    can be "1" if you want all errors to create an alert.
- id: 95me4+L1rPo=
  summary: If the system responsible for alerting becomes unavailable, this raises
    an alert
  points:
    quality: 200
- id: AEnKX3yvwyE=
  summary: Alerts of sufficient severity will send a call or text-message to a relevant
    support team
  points:
    quality: 200
  description: This will only be applicable for projects that have high uptime requirements
    and require immediate response to production issues. Otherwise, broadcasting alerts
    to appropriate Slack channels should be sufficient.
- id: 7apnKFxfI/g=
  summary: A smoke test suite is run before every production release.
  points:
    quality: 200
- id: i9eTIeEHO8o=
  summary: Test cases should be designed or reviewed by someone trained and experienced
    in quality assurance best practices.
  points:
    quality: 25
    security: 100
  description: If you have a member of the QA team doing your testing then you get
    this for free. If you do not have a suitable person assigned to your project,
    please contact a member of the QA team so they can review your test cases and
    advise on a test approach.
- id: ltsVyy9zahc=
  summary: Pull requests include information about the success or failure of regression
    tests
  points:
    velocity: 100
  description: Just get your tests running as part of your CI/CD pipeline for each
    pull request
- id: MWKBwVHnNZo=
  summary: Builds must produce no warnings to pass
  points:
    velocity: 50
    security: 50
- id: vO/1a/Vr9XM=
  summary: All code is automatically linted, and non conforming code cannot be deployed
    (e.g. fails a build pipeline step, or fails a pre-commit hook)
  points:
    velocity: 100
- id: yk1C6qt/kXU=
  summary: Test code coverage statistics are available for the back-end
  points:
    velocity: 50
    quality: 50
- id: 4GoEOAOML/8=
  summary: Test code coverage statistics are available for the front-end
  points:
    velocity: 50
    quality: 50
- id: gbD9Tn/Vads=
  summary: A single end-to-end workflow is automatically tested for every release
    build
  points:
    velocity: 200
    quality: 50
  description: One example is a user logging-in
- id: gbTYaR6GFog=
  summary: Every major workflow within the app is automatically tested for every release
    build
  points:
    velocity: 500
    quality: 500
- id: LlyhMIGzZ8I=
  summary: Tests are comprehensive enough that any code change can be immediately
    pushed into production.
  points:
    velocity: 1000
    quality: 250
- id: XqISXi1KS0E=
  summary: All workflows can be manually tested locally after a single command from
    a fresh repo check-out. This will probably involve automatically seeding environments
    with example data, including user credentials.
  points:
    velocity: 200
  description: This is targeted towards local dev debugging, and is about making sure
    there is some representative data that can be seeded into local dev. This is not
    the formal QA process which should be done in an environment that is representative
    of production.
- id: c5hKdrdMG48=
  summary: Mobile test cases are run on a single device.
  points:
    quality: 100
- id: a9eigG34CaY=
  summary: Mobile test cases are run on multiple devices that represent likely client
    usage.
  points:
    quality: 200
- id: y8VlA45C4NQ=
  summary: Mobile test cases are run on all supported devices.
  points:
    quality: 300
- id: H1ozmKQv5Sw=
  summary: All interfaces are manually tested for accessibility during the QA for
    major releases, and conform to Web Content Accessibility Guidelines 2.1 Level
    AA
  points:
    quality: 2
- id: L0EG4u2PO2M=
  summary: All interfaces for all releases are automatically tested for compliance
    with WCAG 2.1 AA
  points:
    velocity: 50
    quality: 300
- id: YYgBPQj1UW0=
  summary: iOS apps support high contrast color-scheme configurations and dynamically-sized
    text.
  points:
    quality: 200
- id: /aNbrUHNX+M=
  summary: iOS apps are fully usable with VoiceOver.
  points:
    quality: 200
- id: eIYaSn3re20=
  summary: Localization should be supported
  points:
    quality: 200
- id: q4wNmno5WXk=
  summary: README.md is useful and kept up-to-date
  points:
    velocity: 200
  description: Great for project onboarding, and also for any open-source projects
    we are developing.
- id: coL4NBnUeNE=
  summary: All API endpoints have detailed API documentation
  points:
    velocity: 100
    quality: 50
  description: OpenAPI docs or similar please
- id: LEXAJ7cLYGM=
  summary: API can be tested with a built-in tool like Swagger
  points:
    velocity: 50
  description: Swagger is a great speed boost for development and testing.
- id: XZgbkIOdFUE=
  summary: Architecture Decision Records exist
  points:
    velocity: 100
  description: For any non-obvious decisions, e.g. Quickblox vs. Twilio, please make
    a record of why you made the decision you did. You don't want to be trying to
    remember when you're having a meeting about it six months into the future. Not
    needed for decisions like "we used Next.js" or "we used a SQL db".
