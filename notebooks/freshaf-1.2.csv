,summary,,velocity,security,quality,resilience,description
,App can be run end-to-end locally,,1,,,,"""End-to-end"" here means the frontend, backend, and database can be easily spun up so anyone can test the app locally. This can be achieved quite easily using docker-compose."
,"Testing and QA can be performed on an environment isolated from development, and isolated from production.",,1,1,,,"This is normally achieved by having three separate environments: dev (for developers to control), test (for QAs to control and test in), and prod (for the PO to control and push new releases to)."
,Front-end branches can be manually tested in an isolated environment,,4,,,,"This is often referred to as ""feature-branch testing"""
,Back-end branches can be manually tested in an isolated environment,,4,,,,"This is often referred to as ""feature-branch testing"""
,Architecture changes can be manually tested in an isolated environment,,4,,4,,"This is often referred to as ""feature-branch testing"""
,Any internals of the production environment are not accessible from other environments,,,2,,,This includes database servers and logs.
,Pushing to any branch or merging a PR requires project membership,,,2,,,
,Any code deployed to production must have been approved by at least one other person other than the author of the code,,,3,,,Just requiring a single approval on all PRs fulfils this requirement
,Production deployments can only be performed by an admin user,,,3,,,"A good approach to this is to only allow deployments from your CI server (e.g. GitHub Actions), and make sure that an admin approval is required for any PR that would start a deployment to prod."
,Access to all infrastructure requires 2FA,,,2,,,If you are using a client mandated platform which does not support 2FA then this is N/A
,Access to all infrastructure requires specific user credentials (rather than a shared key),,,2,,,There should be no shared accounts or keys for accessing infrastructure
,Production data storage is only accessible to an admin user,,,3,,,"Production ""state"" here refers to databases, sessions state (e.g. Redis), or message brokers."
,Production architecture is only accessible to a production administrator,,,3,,,Production administrators must be agreed upon by the client
,Production logs are only accessible to production administrators,,,3,,,
,"Production backups, including logs, require production administrator permission to access",,,4,,,Production administrators must be agreed upon by the client and may include all developers.
,Production backups are replicated to separate data-store requiring super-admin permissions,,,4,,4,
,"All infrastructure, including backups and logs, are only accessible to explicitly approved users.",,,2,,,"The idea here is to make sure only developers of a project can access the infrastructure of that project, as a minimum standard."
,Any accounts with access to production data or infrastructure must be recorded in a single location. This record must include the level of access each account has.,,,4,,,
,Accounts are granted infrastructure access automatically through infrastructure-as-code,,,4,,,
,"Internal services, including databases, are only accessible from other services within this app",,,1,,,"This can be achieved using a private subnet in AWS and making sure only your load-balancer is in the public subnet. In OpenShift, make sure there are no routes into any services which should not be accessed by application users."
,"All production infrastructure access is logged, including the user who performed the access",,,3,,,
,Dependencies all target specific minor release versions,,1,,,,
,All app dependencies are automatically analysed for vulnerabilities,,,2,,,
,All infrastructure components are automatically analysed for vulnerabilities,,,4,,,
,"Credentials, including database passwords and keys, are not stored anywhere in source control history, and are instead stored in a suitable secrets vault.",,,1,,,A good example this is using https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets to inject any such passwords and keys as part of continuous deployment.
,"Secrets on mobile apps must not be reasonably accessible, even on jailbroken devices.",,,2,,,"API/SDK keys/passwords are stored in a way that they cannot be reasonably accessed, even on jailbroken devices (e.g. the keys aren't stored as plain text such that running `strings` on the binary will return the key)."
,"End-to-end tests utilise the ZAP proxy, and a ZAP alert is considered a test failure",,,4,,,
,Every release build must pass a ZAP automated scan,,,2,,,
,All major production releases have been manually penetration tested by someone with appropriate security training. This can be an internal FreshWorks team member or a third party.,,,4,,,
,All environments only expose ports 80 and 443 publicly. Only a bastion host may expose a single extra port.,,,1,,,
,All access to unsecured HTTP is redirected to an HTTPS endpoint,,,1,,,
,"If a security certificate is about to expire, an alert will be raised.",,1,,1,,
,All security certificates are automatically renewed,,2,,,,
,"All data in transit must be encrypted. The minimum standard for this encryption is Mozilla's ""Intermediate"" or above.",,,1,,,
,"All data at rest must be encrypted. The minimum standard for this encryption is Mozilla's ""acceptable"" or above.",,,1,,,
,"Mobile apps store logs encrypted on-device, which are then sent by the user and decrypted by FreshWorks.",,,,,3,
,User visible error messages contain no technical information,,,1,1,,
,Apps conform to FreshWorks Privacy Requirements,,,4,4,,
,Personally identifying or otherwise confidential data is not stored anywhere except a production database,,,1,,,
,"Log messages never contain secrets, personally identifying, or otherwise confidential data.",,,1,,,This includes frontend and backend logging.
,Production errors can be debugged without any access to sensitive production data. This may involve using database encryption.,,,4,,,
,Every release version of the app is represented by a git tag,,2,,2,,
,Every release of the app is semantically versioned,,2,,2,,
,"Deployment to an environment is performed automatically on pushes to certain branches, e.g. develop deploys to dev, or when merging a PR. This is not applicable if you are unable to automatically release, e.g. releasing a mobile app in the store.",,2,,,,
,All production deployment history is recorded,,2,2,,,
,Deployments require zero downtime,,2,,2,,
,"Production deployments are blue/green, utilizing automated smoke tests",,,,3,,
,All infrastructure changes exist in code and can be PR'd,,2,,3,,"As an example, creating AWS apps using terraform or cloudformation, and making changes in these scripts rather than making changes in the console. IaC techniques mean you can have continuous delivery on the architecture itself."
,Infrastructure changes can be automatically applied to every environment as part of the deployment process,,4,,,,This requirement is about being able to deploy IaC in the same way you would deploy a code change.
,"All HTTP endpoints conform to standards around safety, idempotency, and cacheability",,2,,2,,
,All cacheable HTTP endpoints are cached,,,,4,,
,"Static frontend code is cached in-memory, and returns correct Cache-Control headers",,,,3,,"CloudFront my dudes. Alternatively you can serve your frontend code from a server that supports in-memory caching, like nginx."
,Backend application is stateless,,2,,2,,
,Logging never blocks the application.,,,,1,,"Make sure to process log shipping on a separate thread, even if you are just writing to disk."
,Any app that may experience a spike in demand has been manually performance tested.,,,,3,,"Performance testing should be commensurate with app requirements. For example, if we expect a maximum of 100 concurrent users then this is what should be tested. Please collaborate with a QA Analyst on performance testing. An example tool for this is JMeter."
,"All elements of the application stack will automatically scale in response to load, up to the limits of the underlying infrastructure",,,,4,,"This includes databases and reverse-proxies, not simply the application backend."
,"All releases of the app are automatically performance tested, including auto-scaling",,,,4,,Google Lighthouse has support for automated performance testing of web apps.
,"An health endpoint exists for the backend. A 2XX from this endpoint should represent the app being available, including any external services such as databases, any 5XX status code or no response must indicate that the app is unavailable.",,,,1,,
,Application availability is regularly logged,,,,3,,
,A health/availability dashboard is available with clear information on historical app health and metrics,,,,4,,
,The app remains available despite the loss of any single machine,,,,2,,
,"The app remains available despite the loss of an entire hosting ""availability zone"" or virtual network",,,,3,,
,Chaos Engineering practices should be used,,,,4,4,Tools like Chaos Monkey will increase the robustness and resillience of our production servers. These should not be used in any way that would threaten production uptime.
,Application state is regularly backed up and the application is able to be rolled back to this backed-up state.,,,,,1,"The simplest implementation of this is a regular database backup script, and a method for restoring this backup. Managed database services, like AWS RDS, are highly recommended if available. For OpenShift deployments we recommend https://github.com/BCDevOps/backup-container."
,Production backups are made to a suitable resilient data store,,,,,2,"Any backup done to a resilient store like S3, which includes RDS backups, gets this requirement for free."
,Production backups are manually checked after every release to gain confidence that the backup process is still generating backup files with the correct lookback windows.,,,,,2,
,An automated process validates that backup files exist and have the correct lookback windows. An alert will be thrown if these backups do not exist.,,,,,3,"A common approach to this is to have an internal endpoint which lists the available backups, and then use an automated monitoring tool like prometheus to regularly check that these backups have the correct lookbacks."
,Any actions required to rollback an app to a previous version or state can be done within two hours,,,,3,,"This is worded as ""any actions required"" so that App Store releases, which can require a wait period to rollback, are still covered by this requirement."
,Roll-backs require no application downtime,,,,4,,
,Any actions required to rollback an app to a previous version or state can be done within 5 minutes,,,,4,,"This is worded as ""any actions required"" so that App Store releases, which can require a wait period to rollback, are still covered by this requirement."
,Logs are backed-up to a resilient data-store.,,,4,,,
,Disaster recovery is periodically tested (TODO),,,,4,4,
,Log messages follow FreshWorks Logging Practices.,,1,,,,
,"Any error a user receives will be logged, whether generated on the backend or frontend",,,,3,,
,Any mobile front-end crash or critical error must be tracked.,,,,2,2,Tools like App Center or Firebase Crashlyticis will help us understand critical errors.
,Application logs are centrally available and searchable,,3,,,,
,"Logs from every part of the stack are centrally available, including infrastructure and database logs",,4,4,,,"Infrastructure logs include, but are not limited to, database logs, instance logs, load-balancer logs, and firewall logs."
,"Log collection will never run out of disk space, while still maintaining a lookback window of at least a week.",,1,,,,This requirement can be solved using log rotation with automatic cleanup. Very easy in AWS using S3 bucket object expiration rules.
,All security-critical workflows create logs which identify the user.,,,2,,,
,All user actions within the app create detailed logs,,4,4,,,
,"If the app becomes unavailable or unhealthy, an alert will be raised within 30 seconds",,,,2,,"30s is a 20s timeout, plus 5s to detect, plus 5s to alert."
,Any critical error in the app will raise an alert.,,,,3,,"The definition of a ""critical error"" is up to the team."
,"If logged errors cross a sensible threshold, an alert will be raised",,,,3,,"Threshold not specified as the aim is to not be too prescriptive and instead to encourage a conversation around what is appropriate for the application. The infrastructure must be in place so that alerts can be raised. This threshold can be ""1"" if you want all errors to create an alert."
,"If the system responsible for alerting becomes unavailable, this raises an alert",,,,3,,
,Alerts of sufficient severity will send a call or text-message to a relevant support team,,,,3,,"This will only be applicable for projects that have high uptime requirements and require immediate response to production issues. Otherwise, broadcasting alerts to appropriate Slack channels should be sufficient."
,A regression test suite is run before every production release.,,,,1,,
,Test cases should be designed or reviewed by someone trained and experienced in quality assurance best practices.,,,2,2,,"If you do not have a suitable person assigned to your project, please contact a member of the QA team so they can review your test cases."
,The existence of a branch test failure is visible on a PR,,1,,,,
,Test reports are created and easily accessible for every PR'd branch,,2,,,,
,Builds must produce no warnings to pass,,3,3,,,
,"All code is automatically linted, and non conforming code cannot be deployed (e.g. fails a build pipeline step, or fails a pre-commit hook)",,2,,,,
,Test code coverage statistics are available for the back-end,,4,,4,,
,Test code coverage statistics are available for the front-end,,4,,4,,
,Frontend code has greater than 50% code coverage,,4,,4,,
,Backend code has greater than 50% code coverage,,4,,4,,
,A single end-to-end workflow is automatically tested for every release build,,2,,2,,
,Every major workflow within the app is automatically tested for every release build,,3,,3,,
,"Every workflow within the app, including unhappy paths, is automatically tested for every release build",,4,,4,,
,Tests are comprehensive enough that any code change can be immediately pushed into production.,,4,,4,,
,"All workflows can be manually tested locally after a single command from a fresh repo check-out. This will probably involve automatically seeding environments with example data, including user credentials.",,2,,,,"This is targeted towards local dev debugging, not the formal QA process which should be done in an environment that is representative of production."
,Mobile test cases are run on a single device.,,,,1,,
,Mobile test cases are run on multiple devices that represent likely client usage.,,,,2,,
,Mobile test cases are run on all supported devices.,,,,3,,
,Caches can be reset in a single command for debugging,,2,,,,
,You can connect a remote debugger to any environment within 2 minutes,,4,,,,
,"All interfaces are manually tested for accessibility during the QA for major releases, and conform to Web Content Accessibility Guidelines 2.1 Level AA",,,,2,,
,All interfaces for all releases are automatically tested for compliance with WCAG 2.1 AA,,3,,3,,
,iOS apps support high contrast color-scheme configurations and dynamically-sized text.,,,,3,,
,iOS apps are fully usable with VoiceOver.,,,,3,,
,Localization should be supported,,,,4,,
,Every release version deployed to production must be accompanied by release notes detailing any new features,,4,,,,Jira can be used to easily generate this report
,All services are named descriptively,,1,,,,
,All API endpoints have detailed API documentation,,1,,1,,
,All public methods and classes have a doc comment explaining their behaviour,,4,,,,
,All architecture decisions have a corresponding ADR,,3,,,,
,Pull requests must conform to FreshWorks Code Review Guidelines (TODO) to be accepted,,4,,,,This is FreshAF Black for now while we finalise PR guidelines